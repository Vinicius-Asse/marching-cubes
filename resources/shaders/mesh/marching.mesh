#!mesh shader
#version 450
#extension GL_NV_mesh_shader : require

layout(local_size_x=1) in;
layout(max_vertices=8, max_primitives=12) out;
layout(triangles) out;

out gl_MeshPerVertexNV {
    vec4 gl_Position;
} gl_MeshVerticesNV[];

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];

// Se não redeclararmos gl_PerVertex, irá ocorrer o seguinte erro de compilação:
// error C7592: ARB_separate_shader_objects requires built-in block gl_PerVertex to be redeclared before accessing its members
out gl_PerVertex 
{
    vec4 gl_Position;
} gl_Why;

out PerVertexData
{
  vec4 color;
} v_out[];	

#include "resources/shaders/compute/include/utils.compute"
#include "resources/shaders/compute/include/tables.compute"

struct Triangle 
{
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 norm;
};


uniform mat4 MVP;

uniform int u_trizTable[4096]; // 256 * 16
uniform float u_surfaceLevel;
uniform float u_smooth;
uniform uint u_linear;
uniform uint u_pointsCount;
uniform vec3 u_worldBounds;
uniform vec4 u_points[15];


vec4 getNormalVector(Triangle t) 
{
    vec3 a = vec3(t.v0.x, t.v0.y, t.v0.z);
    vec3 b = vec3(t.v1.x, t.v1.y, t.v1.z);
    vec3 c = vec3(t.v2.x, t.v2.y, t.v2.z);

    return vec4(normalize(cross(b - a, c - a)), 1.0);
}

vec4 interpolate(vec4 a, vec4 b) 
{
    if (u_linear != 0) 
    {
        vec3 aPos = vec3(a.x, a.y, a.z);
        vec3 bPos = vec3(b.x, b.y, b.z);

        float t = (u_surfaceLevel - a.w) / (b.w - a.w);
        vec3 i = aPos + t * (bPos - aPos); 
        return vec4(i.x, i.y, i.z, 1.0f);
    } else 
    {
        return (a + b) / 2.0f;
    }
}

const int getTriTableIndex(int _x, int _y) 
{
    return _y + (_x * 16);
}

vec4 getPoint(uint _x, uint _y, uint _z)
{
    float x = remap(_x, 0, gl_NumWorkGroups.x * gl_WorkGroupSize.x - 1, -u_worldBounds.x/2.0f, u_worldBounds.x/2.0f);
    float y = remap(_y, 0, gl_NumWorkGroups.y * gl_WorkGroupSize.y - 1, -u_worldBounds.y/2.0f, u_worldBounds.y/2.0f);
    float z = remap(_z, 0, gl_NumWorkGroups.z * gl_WorkGroupSize.z - 1, -u_worldBounds.z/2.0f, u_worldBounds.z/2.0f);

    float value = 2.5;
    for (int i = 0; i < u_pointsCount; i++) 
    {
        float distanteToPoint = distance(vec3(x, y, z), vec3(u_points[i].x, u_points[i].y, u_points[i].z));
        value = smoothMin(remap(abs(distanteToPoint), 0, 5.5, -1, 1), value, u_smooth);
    }

    return vec4(x, y, z, value);
}

void main()
{
    ivec3 id = getId();

    // if (
    //     id.x >= gl_NumWorkGroups.x * gl_WorkGroupSize.x - 1 || 
    //     id.y >= gl_NumWorkGroups.y * gl_WorkGroupSize.y - 1 || 
    //     id.z >= gl_NumWorkGroups.z * gl_WorkGroupSize.z - 1
    // ) return;

    // vec4 corners[8] = {
    //     getPoint(id.x    , id.y    , id.z    ),
    //     getPoint(id.x + 1, id.y    , id.z    ),
    //     getPoint(id.x + 1, id.y    , id.z + 1),
    //     getPoint(id.x    , id.y    , id.z + 1),
    //     getPoint(id.x    , id.y + 1, id.z    ),
    //     getPoint(id.x + 1, id.y + 1, id.z    ),
    //     getPoint(id.x + 1, id.y + 1, id.z + 1),
    //     getPoint(id.x    , id.y + 1, id.z + 1)
    // };

    // int index = 0;
    // if (corners[0].w < u_surfaceLevel) index |=   1;
    // if (corners[1].w < u_surfaceLevel) index |=   2;
    // if (corners[2].w < u_surfaceLevel) index |=   4;
    // if (corners[3].w < u_surfaceLevel) index |=   8;
    // if (corners[4].w < u_surfaceLevel) index |=  16;
    // if (corners[5].w < u_surfaceLevel) index |=  32;
    // if (corners[6].w < u_surfaceLevel) index |=  64;
    // if (corners[7].w < u_surfaceLevel) index |= 128;

    // if (index == 0 || index == 256) return;

    // for (int i = 0; u_trizTable[getTriTableIndex(index, i)] != -1; i+=3) 
    // {
    //     int idx = u_trizTable[getTriTableIndex(index, i+0)];
    //     int idy = u_trizTable[getTriTableIndex(index, i+1)];
    //     int idz = u_trizTable[getTriTableIndex(index, i+2)];

    //     Triangle t;
    //     t.v0 = interpolate(corners[cornerListA[idx]], corners[cornerListB[idx]]);
    //     t.v1 = interpolate(corners[cornerListA[idy]], corners[cornerListB[idy]]);
    //     t.v2 = interpolate(corners[cornerListA[idz]], corners[cornerListB[idz]]);
    //     t.norm = getNormalVector(t);
    // }
}
  

#!fragment shader
#version 450
 
layout(location = 0) out vec4 FragColor;
 
in PerVertexData
{
	vec4 color;
} fragIn;	
 
void main()
{
	FragColor = fragIn.color;
}
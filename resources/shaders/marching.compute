#version 450
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#include "resources/shaders/include/tables.compute"

struct Triangle {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 norm;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0) uniform atomic_uint trianglesCount;

layout(std430, binding = 1) buffer Triangles { Triangle Data[]; };
layout(std430, binding = 2) buffer Points    { vec4 points[]; };
layout(std430, binding = 3) buffer TriTable  { int triTable[]; };

uniform float u_surfaceLevel;

ivec3 getId() {
    return ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
}

uint currPosFromCord(uint x, uint y, uint z) {
    return x + (gl_NumWorkGroups.y * gl_WorkGroupSize.y * y) + (gl_NumWorkGroups.y * gl_WorkGroupSize.y * gl_NumWorkGroups.z * gl_WorkGroupSize.z * z);
}

vec4 getNormalVector(Triangle t) {
    vec3 a = vec3(t.v0.x, t.v0.y, t.v0.z);
    vec3 b = vec3(t.v1.x, t.v1.y, t.v1.z);
    vec3 c = vec3(t.v2.x, t.v2.y, t.v2.z);

    return vec4(normalize(cross(b - a, c - a)), 1.0);
}


vec4 interpolate(vec4 a, vec4 b) {
    vec3 aPos = vec3(a.x, a.y, a.z);
    vec3 bPos = vec3(b.x, b.y, b.z);

    float t = (u_surfaceLevel - a.w) / (b.w - a.w);
    vec3 i = aPos + t * (bPos - aPos); 
    return vec4(i.x, i.y, i.z, 1.0f);
    //return (a + b) / 2.0f;
}

int getTriTableIndex(int x, int y) {
    return y + (x * 16);
}

const int getConstIndex(int v) {
    for(int i = 0; i <= v && i < 16; i++) {
        if (i == v) {
            return i;
        }
    }
}

void main()
{
    ivec3 id = getId();

    if (id.x >= gl_NumWorkGroups.x * gl_WorkGroupSize.x - 1 || 
        id.y >= gl_NumWorkGroups.y * gl_WorkGroupSize.y - 1 || 
        id.z >= gl_NumWorkGroups.z * gl_WorkGroupSize.z - 1
        ) return;

    uint currPos = currPosFromCord(id.x, id.y, id.z);

    vec4 corners[8] = {
        points[currPosFromCord(id.x    , id.y    , id.z    )],
        points[currPosFromCord(id.x + 1, id.y    , id.z    )],
        points[currPosFromCord(id.x + 1, id.y    , id.z + 1)],
        points[currPosFromCord(id.x    , id.y    , id.z + 1)],
        points[currPosFromCord(id.x    , id.y + 1, id.z    )],
        points[currPosFromCord(id.x + 1, id.y + 1, id.z    )],
        points[currPosFromCord(id.x + 1, id.y + 1, id.z + 1)],
        points[currPosFromCord(id.x    , id.y + 1, id.z + 1)]
    };

    int index = 0;
    if (corners[0].w < u_surfaceLevel) index |=   1;
    if (corners[1].w < u_surfaceLevel) index |=   2;
    if (corners[2].w < u_surfaceLevel) index |=   4;
    if (corners[3].w < u_surfaceLevel) index |=   8;
    if (corners[4].w < u_surfaceLevel) index |=  16;
    if (corners[5].w < u_surfaceLevel) index |=  32;
    if (corners[6].w < u_surfaceLevel) index |=  64;
    if (corners[7].w < u_surfaceLevel) index |= 128;

    if (index == 0 || index == 256) return;

    for (int i = 0; triTable[getTriTableIndex(index, i)] != -1; i+=3) {
        int idx = triTable[getTriTableIndex(index, i+0)];
        int idy = triTable[getTriTableIndex(index, i+1)];
        int idz = triTable[getTriTableIndex(index, i+2)];

        Triangle t;
        t.v0 = interpolate(corners[cornerListA[idx]], corners[cornerListB[idx]]);
        t.v1 = interpolate(corners[cornerListA[idy]], corners[cornerListB[idy]]);
        t.v2 = interpolate(corners[cornerListA[idz]], corners[cornerListB[idz]]);
        t.norm = getNormalVector(t);

        uint atomicCounter = atomicCounterIncrement(trianglesCount);
        Data[atomicCounter] = t;
    }
}